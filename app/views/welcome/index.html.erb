<div id="main-container" class="container">
      <div class="row">
        
     <div class="col-xs-8">
          <h2>Tervetuloa vierailija!</h2>
            <p>
            Tervetuloa Klausin rakennustyömaalle. Tästä rakentuu jatkossa lisäosa Klausin Linkedinille, joka osoittaa hiukan teknistä osaamista.
            Tämä on toteutettu <a href="http://iislab.ee.tut.fi/piiri/groups/ohjelmallinen-sis%C3%A4ll%C3%B6nhallinta-2016"> ohjelmallisen sisällön
                hallinnan</a> kurssia varten.
                <p>
            <b> Pääset selailemaan blogipäivityksiä vain luomalla tunnukset/kirjautumalla sisään.</b><p>



       <canvas id="myCanvas" width="500" height="100" style="border:1px solid #d3d3d3;">
         Your browser does not support the HTML5 canvas tag.</canvas>

       <script>
         var c = document.getElementById("myCanvas");
         var ctx = c.getContext("2d");
         ctx.font = "20px Arial";
         ctx.fillText("Sivuilta löytyvät seuraavat ominaisuudet",10,50);
       </script>
       <p>
                    - sisäänkirjautuminen <p>
                    - blogi päivitykset (CRUD-ominaisuuksilla)<p>
          <p>
            </canvas>

       <p>

            Voit luoda tunnukset mielivaltaisesti. En pysty takaamaan tunnuksien tietoturvallista käsittelyä...<p>
          Esim:
          <p>Name: markus </p>
          <p>Email: markus 
          <p>Password: markus</p>
          </p>
          
          <!-- joopa joo. tuskin toimii --> 
          <h1>Linkedin Application</h1>
<a href="/linkedin_oauth_url" class="btn btn-primary btn-larg">Connect to LinkedIn</a>
       <%= @nimi %>
          
        </div>
           
<div class="col-xs-4">

        <h3>Klaus twitterissä, to be changed</h3>    
    <a class="twitter-timeline" href="https://twitter.com/OP_Ryhma" data-widget-id="718728891490254848">Tweets by @OP_Ryhma</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>


         
    </div>  
            
            
<!--            %= link_to 'Täällä pääset kirjoittamaan blogin merkeissä kuulumisia', controller: 'articles' %>-->
            
            
        </div>
        
            
            <head>
<title>Facebook Login JavaScript Example</title>
<meta charset="UTF-8">
</head>
<body>
<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '{819021428224772}',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.5' // use graph api version 2.5
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  <div id="fb-root"></div>
(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/fi_FI/sdk.js#xfbml=1&version=v2.5&appId=819021428224772";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      document.getElementById('status').innerHTML =
        'Thanks for logging in, ' + response.name + '!';
    });
  }
</script>

<!--
  Below we include the Login Button social plugin. This button uses
  the JavaScript SDK to present a graphical Login button that triggers
  the FB.login() function when clicked.
-->

<div class="fb-login-button" data-max-rows="1" data-size="large" data-show-faces="false" data-auto-logout-link="false"></div>

<div id="status">
</div>

</body>